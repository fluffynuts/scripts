#!/bin/bash
if test -z "$XDG_RUNTIME_DIR"; then
  export XDG_RUNTIME_DIR="/run/user/$(id -u)"
fi
STICKY_FILE=/tmp/$(basename $0).sticky
AUTO_SET_SOUND="$(dirname $0)/autoset-sound"

if test -z "$1"; then
  OUTPUT=""
else
  OUTPUT="$1"
fi

function log()
{
  if ! test -z "$DEBUG"; then
    echo $*
  fi
}

function reset_sticky_state()
{
  rm -f $STICKY_FILE
}

if test -e $STICKY_FILE; then
  CURRENT_STICKY="$(cat $STICKY_FILE)"
  if test "$OUTPUT" = "auto"; then
    echo "Sticky selection set to '$CURRENT_STICKY'; resetting back to auto..."
    reset_sticky_state
  elif test ! -z "$FORCE"; then
    echo "Unsticking sound selection by force..."
    reset_sticky_state
  elif test ! -z "$OUTPUT" && test -z "$STICKY"; then
    echo "Sticky sound selection set to '$CURRENT_STICKY'; not changing"
    exit
  fi
fi

function save_sticky_state() {
  if test ! -z "$STICKY"; then
    echo $OUTPUT > $STICKY_FILE
  fi
}

function echo_selection() {
  if ! test -z "$STICKY"; then
    echo "Selecting STICKY output device: $OUTPUT"
  else
    echo "Selecting output device: $OUTPUT"
  fi
}

function run_pw_metadata() {
  if test -z "$PIPEWIRE_REMOTE"; then
    pw-metadata $*
  else
    echo "PIPEWIRE_REMOTE set: $PIPEWIRE_REMOTE"
    pw-metadata --remote $PIPEWIRE_REMOTE $*
  fi
}

function find_speakers_alsa_sink() {
  pactl list | grep -B 1 "Description: Built-in Audio Analog Stereo" | head -n1 | awk '{ print $2 }'
}

function find_headphones_alsa_sink() {
  pactl list | grep -B 1 "Description: CORSAIR HS70 Pro Wireless Gaming Headset Analog Stereo" | head -n1 | awk '{ print $2 }'
}

function select_speakers() {
  SINK=$(find_speakers_alsa_sink)
  if test -z "$(run_pw_metadata | grep default.audio.sink | grep $SINK)"; then
    run_pw_metadata 0 default.audio.sink "{\"name\":\"$SINK\"}"
  else
    echo "speakers already selected as default sink"
  fi
}

function select_headphones() {
  SINK=$(find_headphones_alsa_sink)
  if test -z "$(run_pw_metadata | grep default.audio.sink | grep $SINK)"; then
    run_pw_metadata 0 default.audio.sink "{\"name\":\"$SINK\"}"
  else
    echo "headphones already selected as default sink"
  fi
}

function ensure_max_mic_volume() {
  pactl set-source-volume @DEFAULT_SOURCE@ '150%'
}

if test "$OUTPUT" = "headphones"; then
  echo_selection
  select_headphones
  ensure_max_mic_volume
  save_sticky_state
elif test "$OUTPUT" = "speakers"; then
  echo_selection
  select_speakers
  save_sticky_state
elif test "$OUTPUT" = "auto"; then
    if test -e "$STICKY_FILE"; then
      echo "Setting auto-selection for audio output device"
      rm -f $STICKY_FILE
    elif test "$1" != "auto"; then
      echo "Auto-selection already enabled"
    fi
else
  STICKY=1
  echo "Please select a sound output device:"
  echo "(a) headphones"
  echo "(b) speakers"
  echo "(c) auto-select"
  echo -n "> "
  read selection discarded
  if test -z "$selection"; then
    $0
  elif test "$selection" = "a" || test "$selection" = "A" || test ! -z "$(echo headphones | grep -i "$selection")"; then
    select_headphones
    OUTPUT="headphones"
    save_sticky_state
  elif test "$selection" = "b" || test "$selection" = "B" || test ! -z "$(echo speakers | grep -i "$selection")"; then
    select_speakers
    OUTPUT="speakers"
    save_sticky_state
  elif test "$selection" = "c" || test "$selection" = "C" || test ! -z "$(echo auto-select | grep -i "$selection")"; then
    reset_sticky_state
    # autoset-sound knows the actual timing, calling back into this script appropriately
    $AUTO_SET_SOUND
  else
    $0
  fi
fi
