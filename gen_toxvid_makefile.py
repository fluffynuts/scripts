#!/usr/bin/python
# purpose: to generate a makefile wrapper around the toxvid shell script that I wrote
#   which converts one or more video files into a single output video file with
#   the xvid video codec. The problem with this script is that it uses mencoder
#   which doesn't take advantage of multiple cores -- and I have 4 now, so I want
#   to encode at least 3 times faster (perhaps leave one core open for the machine)
#   -- this would be trivial if we had a Makefile for each toxvid job -- hence this
#   script

import os
import sys

def usage():
    print("Usage: %s [source folder] [destination folder]", os.path.basename(sys.argv[0]))
    print("  generates a Makefile in [source folder] with toxvid jobs")
    print("  for each video in that folder, outputting to [destination folder]")
    print("  NOTE 1: [source folder] and [desintation folder] cannot be the same")
    print("  NOTE 2: this script will attempt to just copy files which are already")
    print("    in xvid/divx format")
    sys.exit(0)

if __name__ == "__main__":
    src = None
    dst = None
    for arg in sys.argv[1:]:
        if src == None:
            src = arg
            continue
        if dst == None:
            dst = arg
            continue
        usage()

    if src == None or dst == None:
        usage()

    makefile = os.path.join(src, "Makefile")
    fp = None
    try:
        fp = open(makefile, "w")
    except Exception as e:
        print("Unable to open %s: %s", makefile, str(e))
        sys.exit(1)
    # targets will just have short names with an index
    idx = 0
    # maintain dictionary of targets
    targets = dict()
    conversions = 0
    copies = 0
    for f in os.listdir(src):
        srcfile = os.path.join(src, f)
        if not os.path.isfile(srcfile):
            continue
        # only process video files (by extension)
        ext = os.path.splitext(f)[-1][1:].lower()
        if ext not in ["avi", "mpg", "mpeg", "ts", "mkv", "mov"]:
            print("(ignoring file: %s)" % (srcfile))
            continue
        sys.stdout.write("%s: " % (f))
        sys.stdout.flush()
        dstfile = os.path.join(dst, os.path.splitext(f)[0] + ".avi")
        convert = True
        #if True:
        try:
            pfp = os.popen("file \"%s\"" % srcfile)
            fdata = pfp.read()
            pfp.close()
            pos = fdata.index("video:")
            fdata = fdata[pos + len("video:"):]
            pos = fdata.index("audio:")
            vcodec = fdata[:pos].strip(" ,").lower()
            fdata = fdata[pos + len("audio:")]
            acodec = fdata[pos:].strip(" \n,").lower()
            if vcodec in ["divx", "xvid"]:
                convert = False
        except:
        #else:
            # if there's a problem reading the data, fall back on re-encode
            pass

        if convert:
            print("convert")
            cmd = "toxvid -o \"%s\" \"%s\"" % (dstfile, srcfile)
            conversions += 1
        else:
            print("copy")
            cmd = "cp \"%s\" \"%s\"" % (srcfile, dstfile)
            copies += 1

        targets["target%i" % (idx)] = ["@if test ! -e \"%s\"", "then mkdir -p %s" % (dst), "%s" % (cmd), "fi"]
        idx += 1

    # generate output makefile
    t = list(targets.keys())
    t.sort()
    fp.write("# generated by %s\n\nall: %s cleanup\n\n" % (os.path.basename(sys.argv[0]), " ".join(t)))
    fp.write("\n\ncleanup:\n\t@rm \"%s\"\n" % (makefile))
    for k in t:
        fp.write("\n%s:\n\t%s\n" % (k, ";\\\n\t".join(targets[k])))

    fp.close()
    s1 = "s"
    if conversions == 1: 
        s1 = ""
    s2 = "s"
    if copies == 1:
        s2 = ""
    print("Makefile generated at %s" % (makefile))
    print("  %i conversion%s    %i copie%s" % (conversions, s1, copies, s2))



