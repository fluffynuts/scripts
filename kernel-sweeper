#!/usr/bin/python3
# vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
import os
import sys
import re
import subprocess
import shutil
import re

def would(str):
    print("Would: %s" % (str))


def purge_dpkg(version):
    if not on_debian():
        return
    print("Purging headers for %s" % (version))
    cmd = "dpkg --purge linux-image-%s" % (version)
    if DRY_RUN:
        would(cmd)
    else:
        os.system(cmd)

    print("Purging image for %s" % (version))
    cmd = "dpkg --purge linux-headers-%s" % (version)
    if DRY_RUN:
        would(cmd)
    else:
        os.system(cmd)


def on_debian():
    proc = subprocess.Popen(
        ["which", "dpkg"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    return proc.returncode == 0


def remove_modules(version, base):
    print(yellow("Picking off straggling modules for %s" % (version)))
    modules_dir = os.path.join(base, version)
    contents = sorted(ls_recursive(modules_dir), reverse=True)
    if DRY_RUN:
        for f in contents:
            would(red("remove: %s" % f))
        would(red("remove: %s" % (modules_dir)))
        return
    shutil.rmtree(modules_dir)


def remove_boot_detritus(version):
    print(yellow("Cleaning out /boot for %s" % version))
    contents = ls_recursive("/boot")
    for f in contents:
        if not version in f:
            continue
        if DRY_RUN:
            would(red("remove: %s" % (f)))
        else:
            os.remove(f)


def remove_kernel_sources(version):
    source_dir = re.sub("-(x86_64|i386)", "", "/usr/src/linux-%s" % version)
    if (not os.path.isdir(source_dir)):
        print(yellow("No kernel sources found at %s" % source_dir))
        return

    if DRY_RUN:
        would(red("remove %s" % source_dir))
        return

    print(yellow("Removing sources from %s" % source_dir))
    shutil.rmtree(source_dir)


def ls_recursive(dir):
    stack = [dir]
    ret = []
    while stack:
        thisdir = stack.pop(0)
        if not os.path.isdir(thisdir):
            continue
        for f in sorted(os.listdir(thisdir)):
            path = os.path.join(thisdir, f)
            ret.append(path)
            if os.path.isdir(path):
                stack.append(path)
    return ret


def version(path):
    parts = path.split(os.sep)
    last = re.sub(r"-.*$", "", parts[-1])
    # parts = map(lambda x: x * 100, map(int, last.split(".")))
    parts = map(int, last.split("."))
    result = ""
    print(path)
    for part in parts:
        local_part = str(part)
        while len(local_part) < 4:
            local_part = "0" + local_part
        result = result + local_part
    print("%s -> %s" % (path, result))
    return result


def usage():
    print("Usage: %s {opts}" % (os.path.basename(sys.argv[0])))
    print(" where opts are of")
    print(" -d / --dryrun:      report only, don't actually delete or remove anything")
    print(" -k / --keep:        specify how many versions of the kernel to keep")
    print("                      (default 2)")
    print(" -md / --modulesdir  specify location of your modules")
    print("                      (default /lib/modules)")


def red(s):
    return color(s, 31)


def green(s):
    return color(s, 32)


def yellow(s):
    return color(s, 33)


def blue(s):
    return color(s, 34)


def purple(s):
    return color(s, 35)


def cyan(s):
    return color(s, 36)


def white(s):
    return color(s, 37)


def color(s, c):
    return "\033[1;%im%s\033[1;0m" % (c, s)


def try_convert_to_int(s):
    try:
        return int(s)
    except:
        print("%s is not a valid number" % (s))
        sys.exit(1)


def restarted_as_root():
    user = (
        subprocess
        .check_output("whoami")
        .decode("utf-8")
        .strip()
    )
    if user == "root":
        return False
    args = "sudo -p \"Your password is required to continue: \" " + \
        " ".join(sys.argv)
    os.system(args)
    return True

# TODO: should rather use subprocess for restarting as root


if __name__ == "__main__":
    if restarted_as_root():
        sys.exit()
    global DRY_RUN
    DRY_RUN = False
    keep = 2
    basedir = "/lib/modules"
    last_arg = ""
    for arg in sys.argv[1:]:
        if ["-k", "--keep", "-keep",
                "-md", "--modulesdir", "-modulesdir"].count(arg) > 0:
            last_arg = arg
            continue
        if ["-h", "-help", "--help"].count(arg) > 0:
            usage()
            sys.exit(0)
        if ["-d", "--dryrun"].count(arg) > 0:
            DRY_RUN = True
        if ["-k", "--keep", "-keep"].count(last_arg) > 0:
            keep = try_convert_to_int(arg)
            last_arg = arg
        if ["-md", "--modulesdir", "-modulesdir"].count(last_arg) > 0:
            basedir = arg
            last_arg = arg
    if not os.path.isdir(basedir):
        print("Can't find modules base at %s; specify with -md" % (basedir))
        sys.exit(2)

    available_kernels = sorted(os.listdir(basedir), reverse=True, key=version)

    if len(available_kernels) <= keep:
        print("You only have %i kernel images: nothing to do" %
              (len(available_kernels)))
        sys.exit(0)

    to_remove = available_kernels[keep:]

    if DRY_RUN:
        print(cyan("DRY RUN ONLY - NON-DESTRUCTIVE"))
    else:
        print(red("Please verify before continuing:"))
    print("Operation would purge the following kernels:")
    for k in to_remove:
        print(red("  %s" % (k)))
    print("The following kernels would be left:")
    for k in available_kernels[:2]:
        print(green("  %s" % (k)))

    sys.stdout.write("Are you sure you want to continue ? (y/N) ")
    sys.stdout.flush()
    ans = sys.stdin.readline().strip().lower()
    if len(ans) == 0 or ans[0] != "y":
        print("Bailing out")
        sys.exit(0)

    for k in to_remove:
        purge_dpkg(k)
        remove_modules(k, basedir)
        remove_boot_detritus(k)
        remove_kernel_sources(k)
    print(yellow("Update GRUB"))
    if DRY_RUN:
        would(purple("update grub"))
    else:
        os.system("grub-mkconfig -o /boot/grub/grub.cfg")
        print(green(">> done <<"))
