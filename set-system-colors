#!/usr/bin/python
import io
import os
import subprocess
import re
from sys import argv
from datetime import datetime

debug_enabled = os.environ.get("DEBUG") == "1"
log_file = None
openrgb = "/home/daf/code/opensource/OpenRGB/openrgb"


def debug(s):
    line = "[%s] %s" % (datetime.now(), s)
    if debug_enabled:
        print(line)
    if log_file is not None:
        # noinspection PyTypeChecker
        with open(log_file, "a") as fp:
            fp.writelines("%s\n" % line)


def read_devices():
    proc = subprocess.Popen([openrgb, "-l"], stdout=subprocess.PIPE)
    result = []
    device_matcher = re.compile("^\\d:")

    for line in io.TextIOWrapper(proc.stdout, encoding="utf-8"):
        if device_matcher.match(line) is None:
            continue

        parts = line.strip().split(":")
        result.append({
            "id": parts[0],
            "name": ":".join(parts[1:]).strip()
        })
    return result


def generate_cli(devices):
    mode = "static"
    ram_colors = ["FF1E00", "FF1400", "FF0A00", "FF0000"]
    board_color = "FF2800"
    ram_matcher = re.compile(".*DRAM.*", re.IGNORECASE)
    board_matcher = re.compile(".*AORUS ELITE.*", re.IGNORECASE)
    result = []
    for device in devices:
        if ram_matcher.match(device["name"]):
            if len(ram_colors) == 0:
                raise Exception("Ran out of RAM colors?")
            debug("adding ram at %s: %s" % (device["id"], ram_colors[0]))
            result.extend(["-d", device["id"], "-m", mode, "-c", ram_colors[0]])
            ram_colors = ram_colors[1:]
        elif board_matcher.match(device["name"]):
            debug("adding board at %s: %s" % (device["id"], board_color))
            result.extend(["-d", device["id"], "-m", mode, "-c", board_color])
    return result


def run_openrgb_with(options):
    cli = [openrgb]
    cli.extend(options)
    debug("running cmd: %s" % (" ".join(cli)))
    proc = subprocess.Popen(cli, stdout=subprocess.PIPE)
    proc.wait()
    lines = []
    for line in io.TextIOWrapper(proc.stdout, encoding="utf-8"):
        line = line.strip()
        debug(line)
        lines.append(line)
    if proc.returncode != 0:
        print("unable to run openrgb with cli: " + " ".join(options) + "\n" + "\n".join(lines))
        raise Exception("unable to run openrgb")


def main():
    global debug_enabled
    global log_file
    start_index = argv.index(__file__) + 1
    args = argv[start_index:]
    if "--debug" in args:
        debug_enabled = True
    if "--log-file" in args:
        log_file_index = args.index("--log-file")
        if -1 < log_file_index < len(args):
            log_file = args[log_file_index + 1]
    devices = read_devices()
    cli = generate_cli(devices)
    run_openrgb_with(cli)


if __name__ == "__main__":
    main()
