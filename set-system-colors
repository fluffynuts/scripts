#!/usr/bin/python
import io
import os
import subprocess
import re
import signal
import time
from sys import argv
from datetime import datetime
import tempfile

debug_enabled = os.environ.get("DEBUG") == "1"
profile_name = os.environ.get("COLOR_PROFILE")
if profile_name is None:
    profile_name = "purple"
log_file = None
#openrgb = "/home/daf/code/opensource/OpenRGB/openrgb"
openrgb = "/usr/bin/openrgb"

profiles = {
    "red": {
        "ram": [ "FF1E00", "FF1400", "FF0A00", "FF0000" ],
        "board": "FF2800",
        "gpu": "FF1900",
        "mouse": "FF0000"
    },
    "white": {
        "ram": [ "FFFFFF", "FFFFFF", "FFFFFF", "FFFFFF" ],
        "board": "FFFFFF",
        "gpu": "FFFFFF",
        "mouse": "FFFFFF"
    },
    "cyan": {
        "ram": [ "77AAFF", "99BFFF", "99DDFF", "99EFFF" ],
        "board": "77AAFF",
        "gpu": "99FFFF",
        "mouse": "99FFFF"
    },
    "purple": {
        "ram": [ "FF00FF", "BB00BB", "990099", "550055" ],
        "board": "FF00FF",
        "gpu": "FF00FF",
        "mouse": "FF00FF"
    },
    "fire": {
        "ram": [ "FB1D04", "F13704", "EE5204", "FB6D0E" ],
        "board": "DA0303",
        "gpu": "",
        "mouse": "D53803"
    }
}

profile = profiles[profile_name]

def debug(s):
    line = "[%s] %s" % (datetime.now(), s)
    if debug_enabled:
        print(line)
    if log_file is not None:
        # noinspection PyTypeChecker
        with open(log_file, "a") as fp:
            fp.writelines("%s\n" % line)

debug("selected profile: %s" % profile_name)

def read_devices():
    debug("listing devices")
    proc = subprocess.Popen([openrgb, "-l"], stdout=subprocess.PIPE)
    result = []
    device_matcher = re.compile("^\\d:")

    for line in io.TextIOWrapper(proc.stdout, encoding="utf-8"):
        if device_matcher.match(line) is None:
            continue

        parts = line.strip().split(":")
        result.append({
            "id": parts[0],
            "name": ":".join(parts[1:]).strip()
        })
    return result


def generate_cli(devices):
    mode = "static"
    ram_colors = profile["ram"]
    board_color = profile["board"]
    gpu_color = profile["gpu"]
    mouse_color = profile["mouse"]
    ram_matcher = re.compile(".*DRAM.*", re.IGNORECASE)
    board_matcher = re.compile(".*AORUS ELITE.*", re.IGNORECASE)
    gpu_matcher = re.compile(".*RTX.*", re.IGNORECASE)
    mouse_matcher = re.compile(".*Gaming Mouse.*")
    result = []
    for device in devices:
        if ram_matcher.match(device["name"]):
            if len(ram_colors) == 0:
                raise Exception("Ran out of RAM colors?")
            debug("adding ram at %s: %s" % (device["id"], ram_colors[0]))
            result.extend(["-d", device["id"], "-m", mode, "-c", ram_colors[0]])
            ram_colors = ram_colors[1:]
        elif board_matcher.match(device["name"]):
            debug("adding board at %s: %s" % (device["id"], board_color))
            result.extend(["-d", device["id"], "-m", mode, "-c", board_color])
        elif gpu_matcher.match(device["name"]):
            debug("adding gpu at %s: %s" % (device["id"], gpu_color))
            result.extend(["-d", device["id"], "-m", mode, "-c", gpu_color])
        elif mouse_matcher.match(device["name"]):
            debug("adding mouse at %s: %s" % (device["id"], mouse_color))
            result.extend(["-d", device["id"], "-m", mode, "-c", mouse_color])
    return result


def run_openrgb_with(options):
    cli = [openrgb]
    cli.extend(options)
    debug("running cmd: %s" % (" ".join(cli)))
    proc = subprocess.Popen(cli, stdout=subprocess.PIPE)
    proc.wait()
    lines = []
    for line in io.TextIOWrapper(proc.stdout, encoding="utf-8"):
        line = line.strip()
        debug(line)
        lines.append(line)
    if proc.returncode != 0:
        print("unable to run openrgb with cli: " + " ".join(options) + "\n" + "\n".join(lines))
        raise Exception("unable to run openrgb")

def start_openrgb_server():
    print("starting openrgb server");
    cli = [openrgb, "--server", "--noautoconnect" ]
    debug("running cmd: %s" % (" ".join(cli)))
#    with tempfile.NamedTemporaryFile() as tmp:
#        print(tmp.name)
    ret = subprocess.Popen(cli, stdout=subprocess.PIPE)
    time.sleep(3)
#
#        is_ready = False
#        while not is_ready:
#            time.sleep(1)
#            print("not ready yet")
#            if not os.path.exists(tmp.name):
#                print("file not found: %s" % tmp.name)
#                time.sleep(1)
#                continue
#            with open(tmp.name, "r") as current:
#                for line in current.readlines():
#                    line = line.strip()
#                    print("read line: %s" % line)
#                    if line.find("started on port") > -1:
#                        is_ready = true
#                        break
#                    if line.find("failed to start") > -1:
#                        print("WARNING: unable to start openrgb in server mode. Script may run slowly, if at all.")
#                        is_ready = true
#                        break
    print("server is ready")
    return ret

def main():
    global debug_enabled
    global log_file

    server_proc = start_openrgb_server()
    time.sleep(2)

    start_index = argv.index(__file__) + 1
    args = argv[start_index:]
    if "--debug" in args:
        debug_enabled = True
    if "--log-file" in args:
        log_file_index = args.index("--log-file")
        if -1 < log_file_index < len(args):
            log_file = args[log_file_index + 1]
    if "--wait" in args:
        wait_index = args.index("--wait")
        wait_seconds = 5
        if -1 < wait_index < len(args):
            try:
                wait_seconds = int(args[wait_index + 1])
            except:
                pass
        time.sleep(wait_seconds)
    devices = read_devices()
    cli = generate_cli(devices)
    run_openrgb_with(cli)

    server_proc.terminate()

if __name__ == "__main__":
    main()
