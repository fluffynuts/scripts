#!/bin/bash
RUNNING_CONFIG=/proc/config.gz
if  test -z "$KERNEL_SOURCES"; then
  KERNEL_SOURCES=/usr/src/linux
fi
KERNEL_CONFIG=$KERNEL_SOURCES/.config
ALT_KERNEL_CONFIG=/boot/config-$(uname -r)

RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RESET="\033[0m"

function check_is_root()
{
   if test "$(whoami)" != "root"; then
     sudo -p "Your password is required to continue: " $0 $@
     exit $?
   fi
}

function red()
{
  echo -e "${RED}$*${RESET}"
}

function green()
{
  echo -e "${GREEN}$*${RESET}"
}

function yellow()
{
  echo -e "${YELLOW}$*${RESET}"
}

function find_latest_kernel() {
  eselect kernel list | tail -n 1 | sed -e 's/^.*linux-//' | sed -e 's/\s\\*.*//'
}

function find_selected_kernel() {
  eselect kernel list | grep "\*$" | sed -e 's/^.*linux-//' | sed -e 's/\s\\*.*//'
}

function find_running_kernel() {
  uname -r
}

function create_config_if_missing() {
  if test -e $KERNEL_CONFIG; then
    echo "$(yellow using config at $KERNEL_CONFIG)"
  else
    ZCAT="$(which zcat)"
    if test -z "$ZCAT"; then
      echo "No zcat in path"
      exit 3
    fi
    if test -e $RUNNING_CONFIG; then
      echo "$(green "creating $KERNEL_CONFIG from current running kernel")"
      $ZCAT $RUNNING_CONFIG > $KERNEL_CONFIG
    elif -test -e "$ALT_KERNEL_CONFIG"; then
      echo "$(green "creating $KERNEL_CONFIG from $ALT_KERNEL_CONFIG")"
      cp "$ALT_KERNEL_CONFIG" "$KERNEL_CONFIG"
    else
      echo "$(red "unable to generate new $KERNEL_CONFIG: current kernel does not support $RUNNING_CONFIG")"
      exit 2
    fi
  fi
}

function validate_selected_kernel() {
  if test -z "$(which eselect)"; then
    return;
  fi
  LATEST=$(find_latest_kernel)
  ESELECTED=$(find_selected_kernel)
  RUNNING=$(uname -r)
  if test "$ESELECTED" != "$LATEST"; then
    if test "$ALWAYS_SELECT_LATEST_KERNEL" = "y"; then
      ANSWER="y"
    else
      echo "The current selected kernel is $(red ${ESELECTED}), however $(green ${LATEST}) is available."
      echo -n " Select newer kernel? (Y/n) "
      read ANSWER
      ANSWER=$(echo $ANSWER | tr [:upper:] [:lower:])
    fi
    if test -z "$ANSWER" || 
       test "$ANSWER" = "y" ||
       test "$ANSWER" = "yes"; then
      eselect kernel set $LATEST
      ESELECTED=$(find_selected_kernel)

      if test "$ESELECTED" != "$LATEST"; then
        echo "kernel selection fails; please manually run eselect"
        exit 1
      fi
    else
      echo "Continuing rebuild with $ESELECTED"
    fi
  fi
}

function build_with_genkernel() {
  if ! nice -n 19 ionice -c idle genkernel all --microcode --kernel-config=$KERNEL_SOURCES/.config --oldconfig --makeopts=-j$(nproc) --loglevel=2; then
    STATUS=$?
    echo "genkernel exits with status $STATUS; modules not rebuilt!"
    exit $STATUS
  fi

  if test "$FORCE_MODULE_REBUILD" = "y"; then
    yellow "Forcing @module-rebuild" 
    if ! emerge @module-rebuild; then
      STATUS=$?
      echo "module rebuild exits with status $STATUS"
      exit $STATUS
    fi
  fi
}

function prepare_build_environment_apt() {
  REQUIRED="flex bison build-essential gawk libdw-dev";
  MISSING=0
  for pkg in $(echo $REQUIRED); do
    if ! dpkg -s $pkg &> /dev/null; then
      MISSING=1
      break
    fi
  done;
  if test "$MISSING" -eq 0; then
    return
  fi
  apt install $(echo $REQUIRED)
}

function build_generic() {
  DEB_BASED=0
  if test ! -z "$(which apt)"; then
    DEB_BASED=1
    prepare_build_environment_apt
  fi
  if test $DEB_BASED -ne 1; then
    echo "System not supported: this script supports gentoo and debian-based systems"
    exit 42
  fi
  CFG="$KERNEL_SOURCES/scripts/config"
  # don't build -dbg package
  echo "preparing: disabling CONFIG_DEBUG_INFO*"
  $CFG --disable CONFIG_DEBUG_INFO
  $CFG --disable CONFIG_DEBUG_INFO_DWARF4
  $CFG --disable CONFIG_DEBUG_INFO_DWARF5
  $CFG --disable CONFIG_DEBUG_DWARF_TOOLCHAIN_DEFAULT
  $CFG --disable CONFIG_DEBUG_INFO
  $CFG --enable CONFIG_DEBUG_INFO_NONE

  # disable trust / signing - this is built locally
  echo "preparing: disabling system trusted & revocation keys"
  $CFG --disable SYSTEM_TRUSTED_KEYS
  $CFG --disable SYSTEM_REVOCATION_KEYS

  # auto-accept new stuff
  make olddefconfig

  cd "$KERNEL_SOURCES" || exit 2
  if test -z "$MAX_CONCURRENCY"; then
    # count processors: there's one section per processor
    #   in /proc/cpuinfo, so count the blank lines to
    #   avoid issues with language/translation/messaging changes
    let PROCESSOR_COUNT=$(cat /proc/cpuinfo | grep "^$")
    # use half available cores - it's quite likely
    #   that this is the number of physical cores
    #   on the system, as HT "cores" are indistinguishable
    #   from real ones from within the OS
    let MAX_CONCURRENCY="$PROCESSOR_COUNT / 2"
  fi
  make -j $MAX_CONCURRENCY bindeb-pkg
  FILE="debian/image.files"
  if test ! -e "$FILE"; then
    echo "Unable to find image: $FILE not found"
  fi
  NAME=$(cat "$FILE" | awk '{print $1}');
  echo "installing look for ${NAME}"
  dpkg -i ../${NAME}
  cd -
}

function update_grub() {
  if test -z $"(which update-grub)"; then
    grub-mkconfig -o /boot/grub/grub.cfg
  else
    update-grub
  fi
}

function grok_args() {
  FORCE_MODULE_REBUILD="n"
  ALWAYS_SELECT_LATEST_KERNEL="n"
  while test ! -z "$1"; do
    if test "$1" = "--force-module-rebuild" || test "$1" = "-f"; then
      FORCE_MODULE_REBUILD="y"
    fi
    if test "$1" = "-y"; then
      ALWAYS_SELECT_LATEST_KERNEL="y"
    fi
    shift
  done
}

function remind_reboot() {
  if test "$ESELECTED" != "$RUNNING"; then
    echo "Remember to reboot to switch from $(red ${RUNNING}) to $(green ${ESELECTED})"
  fi
}

check_is_root
grok_args $@
validate_selected_kernel
create_config_if_missing
if test -z "$(which genkernel)"; then
  time build_generic
else
  time build_with_genkernel
fi
update_grub
remind_reboot
