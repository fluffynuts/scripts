#!/bin/bash
SAKAKI_BUILDKERNEL=/usr/sbin/buildkernel
if test -e $SAKAKI_BUILDKERNEL; then
    echo "Using Sakaki's buildkernel..."
    $SAKAKI_BUILDKERNEL
    exit $?
fi
RUNNING_CONFIG=/proc/config.gz
KERNEL_CONFIG=/usr/src/linux/.config

RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RESET="\033[0m"

function check_is_root()
{
   if test "$(whoami)" != "root"; then
     sudo -p "Your password is required to continue: " $0 $@
     exit $?
   fi
}

function red()
{
  echo -e "${RED}$*${RESET}"
}

function green()
{
  echo -e "${GREEN}$*${RESET}"
}

function yellow()
{
  echo -e "${YELLOW}$*${RESET}"
}

function find_latest_kernel() {
  eselect kernel list | tail -n 1 | sed -e 's/^.*linux-//' | sed -e 's/\s\\*.*//'
}

function find_selected_kernel() {
  eselect kernel list | grep "\*$" | sed -e 's/^.*linux-//' | sed -e 's/\s\\*.*//'
}

function find_running_kernel() {
  uname -r
}

function create_config_if_missing() {
  if test -e $KERNEL_CONFIG; then
    echo "$(yellow using config at $KERNEL_CONFIG)"
  else
    ZCAT="$(which zcat)"
    if test -z "$ZCAT"; then
      echo "No zcat in path"
      exit 3
    fi
    if test -e $RUNNING_CONFIG; then
      echo "$(green "creating $KERNEL_CONFIG from current running kernel")"
      $ZCAT $RUNNING_CONFIG > $KERNEL_CONFIG
    else
      echo "$(red "unable to generate new $KERNEL_CONFIG: current kernel does not support $RUNNING_CONFIG")"
      exit 2
    fi
  fi
}

function validate_selected_kernel() {
  LATEST=$(find_latest_kernel)
  ESELECTED=$(find_selected_kernel)
  RUNNING=$(uname -r)
  if test "$ESELECTED" != "$LATEST"; then
    if test "$ALWAYS_SELECT_LATEST_KERNEL" = "y"; then
      ANSWER="y"
    else
      echo "The current selected kernel is $(red ${ESELECTED}), however $(green ${LATEST}) is available."
      echo -n " Select newer kernel? (Y/n) "
      read ANSWER
      ANSWER=$(echo $ANSWER | tr [:upper:] [:lower:])
    fi
    if test -z "$ANSWER" || 
       test "$ANSWER" = "y" ||
       test "$ANSWER" = "yes"; then
      eselect kernel set $LATEST
      ESELECTED=$(find_selected_kernel)

      if test "$ESELECTED" != "$LATEST"; then
        echo "kernel selection fails; please manually run eselect"
        exit 1
      fi
    else
      echo "Continuing rebuild with $ESELECTED"
    fi
  fi
}

function build_with_genkernel() {
  if ! nice -n 19 ionice -c idle genkernel all --microcode --kernel-config=/usr/src/linux/.config --oldconfig --makeopts=-j$(nproc) --loglevel=2; then
    STATUS=$?
    echo "genkernel exits with status $STATUS; modules not rebuilt!"
    exit $STATUS
  fi

  if test "$FORCE_MODULE_REBUILD" = "y"; then
    yellow "Forcing @module-rebuild" 
    if ! emerge @module-rebuild; then
      STATUS=$?
      echo "module rebuild exits with status $STATUS"
      exit $STATUS
    fi
  fi
}

function update_grub() {
  grub-mkconfig -o /boot/grub/grub.cfg
}

function grok_args() {
  FORCE_MODULE_REBUILD="n"
  ALWAYS_SELECT_LATEST_KERNEL="n"
  while test ! -z "$1"; do
    if test "$1" = "--force-module-rebuild" || test "$1" = "-f"; then
      FORCE_MODULE_REBUILD="y"
    fi
    if test "$1" = "-y"; then
      ALWAYS_SELECT_LATEST_KERNEL="y"
    fi
    shift
  done
}

function remind_reboot() {
  if test "$ESELECTED" != "$RUNNING"; then
    echo "Remember to reboot to switch from $(red ${RUNNING}) to $(green ${ESELECTED})"
  fi
}

check_is_root
grok_args $@
validate_selected_kernel
create_config_if_missing
build_with_genkernel
update_grub
remind_reboot
