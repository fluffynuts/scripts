#!/bin/env python
import subprocess
import json
import os
import time
import sys
import getopt
import re
import shutil
from datetime import datetime

jsonFields = "attempt,conclusion,displayTitle,event,name,number,status,workflowDatabaseId,workflowName,databaseId"
DEBUG= "DEBUG" in os.environ and os.environ["DEBUG"] == "1"

def debug(*args):
  if not DEBUG:
    return
  print(*args)

def shell_exec(args):
  debug("exec: ", args)
  result = subprocess.check_output(args).decode(sys.stdout.encoding).strip()
  debug("result: ", result)
  return result

def read_current_branch(opts):
  if "branch" in opts:
    return opts["branch"]
  return shell_exec(["git", "symbolic-ref", "--short", "HEAD"])

def fetch_latest_run_for_branch(branch):
  raw = shell_exec(["gh", "run", "list", "--branch", branch, "--json", jsonFields, "--limit", "1"])
  return json.loads(raw)[0]

def fetch_run_for_branch(branch, number):
  raw = shell_exec(["gh", "run", "list", "--branch", branch, "--json", jsonFields, "--limit", "10"])
  jobs = json.loads(raw)
  for job in jobs:
    if job["number"] == number:
      return job

  return None

def read_github_repo_url():
  raw = shell_exec(["git", "remote", "-v"])
  lines = raw.split("\n")
  parts = re.split(r"\s+", lines[0])
  return parts[1].replace("git@github.com:", "https://github.com/").replace(".git", "")

def run_workflow_interactive(branch):
  proc = subprocess.run(["gh", "workflow", "run", "--ref", branch])
  if proc.returncode != 0:
      print(f"gh workflow command failed or aborted (exit code {proc.returncode}, exiting")
      sys.exit(proc.returncode)

def test_for_gh_cli():
  if shutil.which("gh") is None:
    print("ERROR: the 'gh' command is required (install github cli)")
    sys.exit(1)

def timestamp(s):
  now = datetime.now()
  ts = now.strftime("%y-%m-%d %H:%M:%S")
  return f"[{ts}] {s}"

last_status = None
def status(s):
  global last_status
  if last_status is not None:
    space = " " * len(last_status)
    print(f"\r{space}\r", end="")
  last_status = s
  print(f"\r{timestamp(s)}\r", end="")

def notify_and_exit(exit_code, message):
  if shutil.which("notify-send") is not None:
    if exit_code == 0:
      shell_exec(["notify-send", "-i", "dialog-information", "GitHub action complete", message])
    else:
      shell_exec(["notify-send", "-i", "dialog-error", "GitHub action errored", message])
  sys.exit(exit_code)

def print_help_and_exit():
  print(
"""
usage: run-gh-workflow {--branch <branch>}
  runs the 'gh workflow run' flow for the current
  repository with the current branch, unless --branch
  is specified
"""
  )
  sys.exit(0)

def gather_options():
  args = sys.argv[1:]
  options = "hb:"
  long_options = [ "help", "branch=" ]
  result = {};
  try:
    arguments, values = getopt.getopt(args, options, long_options)
    for currentArg, currentVal in arguments:
      if currentArg in ("-h", "--help"):
        print_help_and_exit()
      if currentArg in ("-b", "--branch"):
        result["branch"] = currentVal
  except getopt.error as err:
    print(str(err))
  return result

def main():
  test_for_gh_cli()
  repo_url = read_github_repo_url()
  workflow_url = f'{repo_url}/actions/runs'
  opts = gather_options()
  branch = read_current_branch(opts)
  run_workflow_interactive(branch)
  last_run_before_start = fetch_latest_run_for_branch(branch)
  have_seen_job = False
  latest_run = fetch_latest_run_for_branch(branch)
  run_id = None
  while True:
    if latest_run is None:
      message = f"unable to query latest jobs for '{branch}'" if run_id is None else f"unable to query job {run_id} for branch '{branch}'"
      notify_and_exit(3, message)

    if latest_run["number"] == last_run_before_start["number"]:
      status("waiting for job...")
    else:
      if run_id is None:
        run_id = latest_run["number"]
      elif latest_run["number"] != run_id:
        latest_run = fetch_run_for_branch(branch, run_id)
        continue
        
      if latest_run is None:
        if have_seen_job:
          notify_and_exit(2, "job has disappeared...")
        have_seen_job = True
      else:
        url = f'{workflow_url}/{latest_run["databaseId"]}'
        status(f'[{latest_run["number"]}] {latest_run["status"]} ({url})')
        if latest_run["status"] == "completed":
          notify_and_exit(0, f"Completed: {latest_run["displayTitle"]}")
    time.sleep(5)
    if latest_run["number"] == last_run_before_start["number"]:
      latest_run = fetch_latest_run_for_branch(branch)
    else:
      latest_run = fetch_run_for_branch(branch, latest_run["number"])

if __name__ == "__main__":
  main()
