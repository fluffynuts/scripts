#!/bin/zsh
# some profiles:
# General/Fast 1080p30
# General/HQ 1080p30 Surround

if test -z "$PROFILE"; then
  if test ! -z "$SMALLER"; then
    PROFILE="General/Fast 720p30"
  else
    PROFILE="General/Fast 1080p30"
  fi
fi

if test -z "$HANDBRAKE"; then
  HANDBRAKE=$(which HandBrakeCLI)
fi

if test ! -f "$HANDBRAKE"; then
  echo "Can't find HandBrakeCLI in the path )':"
  exit 1
fi

function clear_line()
{
    echo -n "\r                                                                                                          \r"
}

function reencode()
{
  filepath="$1"
  REQUIRES_REENCODE=0

  SHORT="$(basename $filepath)"
  if test -z "$SHORT"; then
    SHORT="$filepath"
  fi
  if test -z "$FORCE"; then
    MEDIAINFO="$(mediainfo "$filepath")"
    VIDEO_CODEC=$(echo "$MEDIAINFO" | grep -A5 Video | grep Format | grep -v Info | grep -v profile | awk '{print $3}' | tr '[:upper:]' '[:lower:]')
    AUDIO_CODEC=$(echo "$MEDIAINFO" | grep -A5 Audio | grep Format | grep -v Info | grep -v profile | awk '{print $3}' | tr '[:upper:]' '[:lower:]')
    BIT_DEPTH=$(echo "$MEDIAINFO" | grep -i "bit depth" | head -n 1 | awk '{print $4}')
    if test "$BIT_DEPTH" -ne "8"; then
      echo "Unable to reliabily re-encode '${filepath}': has bit depth: '$BIT_DEPTH'";
      rm "$filepath"
      exit 2
    fi
    if test -z "$QUIET"; then
      clear_line
      echo -n "inspect: $SHORT"
    fi
    if test ! -z "$(echo $VIDEO_CODEC | grep -i hevc)"; then
      REQUIRES_REENCODE="1"
    fi

    if test "$AUDIO_CODEC" = "e-ac-3"; then
      REQUIRES_REENCODE="1"
    fi

    if test "$REQUIRES_REENCODE" = "0"; then
      VIDEO_CODEC="$(echo $MEDIAINFO | grep -A10 '^Video' | awk '$1=="Codec" && $2=="ID" {print $4}')"
      if test "$VIDEO_CODEC" = "DIVX"; then
        REQUIRES_REENCODE="1"
      fi
    fi
  fi

  if test "$REQUIRES_REENCODE" = "1" || test ! -z "$FORCE"; then
    clear_line
    if test -z "$FORCE"; then
      echo "Re-encode: \"$SHORT\""
    else
      echo "Re-encode (forced): \"$SHORT\""
    fi
    FILENAME="$(basename $filepath)"
    OUTFILE="${FILENAME%.*}.mp4"
    TMPFILE="/tmp/$OUTFILE"
    LOGFILE="/tmp/re-encode__${FILENAME%.*}.log"
    if test -z "$OUTDIR"; then
      TARGET="$(dirname $filepath)/$OUTFILE"
    else
      TARGET="$OUTDIR/$OUTFILE"
    fi
    if test "$filepath" = "$TARGET"; then
      TEMP="_${OUTFILE}"
      TARGET="$(dirname $filepath)/${TEMP}"
      while test -f "$TARGET"; do
        TEMP="_${TEMP}"
        TARGET="$(dirname $filepath)/${TEMP}"
      done
      MINOR_RENAME="1"
    fi
    CMD="ionice -c idle nice -n 19 $HANDBRAKE -Z \"$PROFILE\" -i \"$filepath\" -o \"$TMPFILE\" &> \"$LOGFILE\""
    if test ! -z "$DEBUG"; then
      echo "cmd: $CMD"
    fi
    if nice -n 19 $HANDBRAKE -Z "$PROFILE" -i "$filepath" -o "$TMPFILE" &> "$LOGFILE"; then
      if mv "$TMPFILE" "$TARGET"; then
        if test ! -z "$MINOR_RENAME"; then
          mv "$TARGET" "$(dirname $filepath)/${OUTFILE}"
        elif test ! -z "$KEEP_ORIGINAL"; then
        elif rm $filepath; then
        else
          RET=$?
          echo "Cannot remove $filepath"
          exit $RET
        fi
      else
        RET=$?
        echo "Cannot move $TMPFILE to $TARGET"
        exit $RET
      fi
    else
      RET=$?
      echo "Re-encode for $filepath fails!"
      echo "Logfile at $LOGFILE contains:"
      cat "$LOGFILE"
      echo "cmdline was: $CMD"
      exit $RET
    fi
  else
    if test -z "$LEAVE_STATUS"; then
      clear_line
    fi
  fi
}

if test ! -f "$1"; then
  echo "$1 is not a file )':"
  exit 1
fi
reencode "$1"
